services:
  postgresql:
    image: postgres:15
    container_name: postgresql
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - assetplan-network
    restart: unless-stopped

  chromadb:
    image: chromadb/chroma:1.0.15
    ports:
      - "8000:8000"
    volumes:
      - chroma-data:/data
    networks:
      - assetplan-network
    environment:
      - CHROMA_DATA_DIR=/data
      - ANONYMIZED_TELEMETRY=false
      - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.basic_authn.BasicAuthServerProvider
      - CHROMA_SERVER_CREDENTIALS=${CHROMA_SERVER_CREDENTIALS}
      - CHROMA_SSL=false
    restart: unless-stopped

  mongo:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data
    networks:
      - assetplan-network
    restart: unless-stopped

  assetplan-api:
    build:
      context: ./assetplan-api
      dockerfile: Dockerfile
    container_name: assetplan-api
    ports:
      - "8010:8010"
    networks:
      - assetplan-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: 256M
        reservations:
          cpus: "0.10"
          memory: 256M
    environment:
      # IA Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_EMBEDDINGS_MODEL=${OPENAI_EMBEDDINGS_MODEL}

      # Chroma Configuration
      - CHROMA_CLIENT_TYPE=http
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.basic_authn.BasicAuthClientProvider
      - CHROMA_SERVER_CREDENTIALS=${CHROMA_SERVER_CREDENTIALS}
      - CHROMA_SSL=false

      # Chroma cloud configuration (optional)
      - CHROMA_TENANT=${CHROMA_TENANT}
      - CHROMA_DATABASE=${CHROMA_DATABASE}
      - CHROMA_API_KEY=${CHROMA_API_KEY}
      - CHROMA_COLLECTION_NAME=${CHROMA_COLLECTION_NAME}

      # PostgreSQL Configuration
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:${POSTGRES_PORT}/${POSTGRES_DB}

      # MongoDB Configuration
      - MONGO_URL=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:27017/
      - MONGO_DB_NAME=assetplan
      - MONGO_COLLECTION_NAME=properties

      - LOG_LEVEL=${LOG_LEVEL:-INFO}

    depends_on:
      chromadb:
        condition: service_started
      postgresql:
        condition: service_started
      mongo:
        condition: service_started
    volumes:
      - ./assetplan-api/src:/app/src
      - ./secrets/gcp-credentials.json:/app/secrets/gcp-credentials.json:ro
    command: uvicorn src.main:app --host 0.0.0.0 --port 8010 --reload

  assetplan-mcp-server:
    build:
      context: ./assetplan-mcp-server
      dockerfile: Dockerfile
    container_name: assetplan-mcp-server
    networks:
      - assetplan-network
    restart: unless-stopped
    ports:
      - "8020:8020"
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: 256M
        reservations:
          cpus: "0.10"
          memory: 256M
    environment:
      # Api Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_EMBEDDINGS_MODEL=${OPENAI_EMBEDDINGS_MODEL}

      # Chroma Configuration
      - CHROMA_CLIENT_TYPE=http
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - CHROMA_COLLECTION_NAME=${CHROMA_COLLECTION_NAME}
      - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.basic_authn.BasicAuthClientProvider
      - CHROMA_SERVER_CREDENTIALS=${CHROMA_SERVER_CREDENTIALS}
      - CHROMA_SSL=false

      #Chroma cloud configuration (optional)
      - CHROMA_TENANT=${CHROMA_TENANT}
      - CHROMA_DATABASE=${CHROMA_DATABASE}
      - CHROMA_API_KEY=${CHROMA_API_KEY}

      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      chromadb:
        condition: service_started

  assetplan-mcp-agent:
    build:
      context: ./assetplan-mcp-agent
      dockerfile: Dockerfile
    container_name: assetplan-mcp-agent
    env_file: .env
    environment:
      # IA Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}

      # AssetPlan API Configuration
      - ASSETPLAN_API_URL=http://assetplan-api:8010

      # PostgreSQL Configuration
      - POSTGRES_HOST=postgresql
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:${POSTGRES_PORT}/${POSTGRES_DB}

      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}

      # LangSmith Configuration
      - LANGSMITH_TRACING=${LANGSMITH_TRACING:-true}
      - LANGSMITH_ENDPOINT=${LANGSMITH_ENDPOINT}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      - LANGCHAIN_PROJECT=assetplan-agent-scraper
    ports:
      - "8080:8080"
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: 512M
        reservations:
          cpus: "0.10"
          memory: 256M
    networks:
      - assetplan-network
    depends_on:
      postgresql:
        condition: service_started
      assetplan-mcp-server:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./assetplan-mcp-agent:/app
    working_dir: /app
    command: uvicorn src.main:app --host 0.0.0.0 --port 8080 --reload

volumes:
  postgres-data:
    driver: local
  chroma-data:
    driver: local
  mongo-data:
    driver: local

networks:
  assetplan-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
